package com.google.gson;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class FieldNamingPolicyTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: com/google/gson/FieldNamingPolicy.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - com/google/gson/FieldNamingPolicy.java:148: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 149 branch to line 149
   *     - conditional line 150 branch to line 150
   *     - conditional line 150 branch to line 153
   */

  @Test
  public void separateCamelCaseInputNotNullNotNullOutputNotNull()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "!";
    final String separator = "$$$$$$$";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("separateCamelCase", Reflector.forName("java.lang.String"),
                                         Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name, separator);

    // Assert result
    Assert.assertEquals("!", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - com/google/gson/FieldNamingPolicy.java:148: loop: 2 iterations
   *  - iteration 1
   *     - conditional line 149 branch to line 149
   *     - conditional line 150 branch to line 150
   *     - conditional line 150 branch to line 153
   *  - iteration 2
   *     - conditional line 149 branch to line 149
   *     - conditional line 150 branch to line 150
   *     - conditional line 150 branch to line 151
   */

  @Test
  public void separateCamelCaseInputNotNullNotNullOutputNotNull3()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "aA";
    final String separator = "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("separateCamelCase", Reflector.forName("java.lang.String"),
                                         Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name, separator);

    // Assert result
    Assert.assertEquals("a!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!A", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - com/google/gson/FieldNamingPolicy.java:148: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 149 branch to line 149
   *     - conditional line 150 branch to line 150
   *     - conditional line 150 branch to line 153
   */

  @Test
  public void separateCamelCaseInputNotNullNotNullOutputNotNull2()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "B";
    final String separator = "$$$$$$$";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("separateCamelCase", Reflector.forName("java.lang.String"),
                                         Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name, separator);

    // Assert result
    Assert.assertEquals("B", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.This test covers `String
   * upperCaseFirstLetter(String)' block 2 (line 162)
   * This test covers `String upperCaseFirstLetter(String)' block 3 (line 162)
   * This test covers `String upperCaseFirstLetter(String)' block 4 (line 162)
   * This test covers `String upperCaseFirstLetter(String)' block 5 (line 163)
   * This test covers `String upperCaseFirstLetter(String)' block 6 (line 164)
   * This test covers `String upperCaseFirstLetter(String)' block 7 (line 164)
   * This test covers `String upperCaseFirstLetter(String)' block 8 (line 165)
   * This test covers `String upperCaseFirstLetter(String)' block 9 (line 165)
   * This test covers `String upperCaseFirstLetter(String)' block 10 (line 167)
   * This test covers `String upperCaseFirstLetter(String)' block 20 (line 176)
   * This test covers `String upperCaseFirstLetter(String)' block 21 (line 176)
   * This test covers `String upperCaseFirstLetter(String)' block 23 (line 177)
   * This test covers `String upperCaseFirstLetter(String)' block 24 (line 177)
   * This test covers `String upperCaseFirstLetter(String)' block 25 (line 177)
   * This test covers `String upperCaseFirstLetter(String)' block 26 (line 177)
   * This test covers `String upperCaseFirstLetter(String)' block 27 (line 178)
   * This test covers `String upperCaseFirstLetter(String)' block 28 (line 178)
   * This test covers `String upperCaseFirstLetter(String)' block 29 (line 178)
   *
   */

  @Test
  public void upperCaseFirstLetterInputNotNullOutputNotNull()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "@";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "upperCaseFirstLetter", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name);

    // Assert result
    Assert.assertEquals("@", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.This test covers `String
   * upperCaseFirstLetter(String)' block 2 (line 162)
   * This test covers `String upperCaseFirstLetter(String)' block 3 (line 162)
   * This test covers `String upperCaseFirstLetter(String)' block 4 (line 162)
   * This test covers `String upperCaseFirstLetter(String)' block 5 (line 163)
   * This test covers `String upperCaseFirstLetter(String)' block 6 (line 164)
   * This test covers `String upperCaseFirstLetter(String)' block 7 (line 164)
   * This test covers `String upperCaseFirstLetter(String)' block 8 (line 165)
   * This test covers `String upperCaseFirstLetter(String)' block 9 (line 165)
   * This test covers `String upperCaseFirstLetter(String)' block 10 (line 167)
   * This test covers `String upperCaseFirstLetter(String)' block 20 (line 176)
   * This test covers `String upperCaseFirstLetter(String)' block 21 (line 176)
   * This test covers `String upperCaseFirstLetter(String)' block 22 (line 180)
   * This test covers `String upperCaseFirstLetter(String)' block 30 (line 180)
   *
   */

  @Test
  public void upperCaseFirstLetterInputNotNullOutputNotNull2()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "A";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "upperCaseFirstLetter", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name);

    // Assert result
    Assert.assertEquals("A", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 164 branch to line 164
   *  - conditional line 167 branch to line
   *  - conditional line 168 branch to line 168
   *  - conditional line 168 branch to line 169
   *  - conditional line 176 branch to line 176
   *  - conditional line 176 branch to line 177
   *  - conditional line 177 branch to line 177
   */

  @Test
  public void upperCaseFirstLetterInputNotNullOutputNotNull3()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "bA!bbbbb";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "upperCaseFirstLetter", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name);

    // Assert result
    Assert.assertEquals("BA!bbbbb", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 164 branch to line 164
   *  - conditional line 167 branch to line
   *  - conditional line 168 branch to line 168
   *  - conditional line 168 branch to line 172
   *  - conditional line 173 branch to line 173
   *  - conditional line 167 branch to line
   *  - conditional line 168 branch to line 168
   *  - conditional line 168 branch to line 169
   *  - conditional line 176 branch to line 176
   *  - conditional line 176 branch to line 180
   */

  @Test
  public void upperCaseFirstLetterInputNotNullOutputNotNull4()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final String name = "`A!";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.google.gson.FieldNamingPolicy");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "upperCaseFirstLetter", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String)methodUnderTest.invoke(null, name);

    // Assert result
    Assert.assertEquals("`A!", retval);
  }
}
