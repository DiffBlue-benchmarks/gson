package com.google.gson.internal.bind;

import com.diffblue.deeptestutils.Reflector;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.TypeAdapters;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class TypeAdaptersTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: com/google/gson/internal/bind/TypeAdapters.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void newFactoryForMultipleTypesInputNullNullNullOutputNotNull() {

    // Arrange
    final Class base = null;
    final Class sub = null;
    final TypeAdapter typeAdapter = null;

    // Act
    final TypeAdapterFactory retval =
        TypeAdapters.newFactoryForMultipleTypes(base, sub, typeAdapter);

    // Assert result
    Assert.assertNotNull(retval);
    Assert.assertEquals(null, Reflector.getInstanceField(retval, "val$typeAdapter"));
    Assert.assertEquals(null, Reflector.getInstanceField(retval, "val$base"));
    Assert.assertEquals(null, Reflector.getInstanceField(retval, "val$sub"));
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void newFactoryInputNullNullNullOutputNotNull() {

    // Arrange
    final Class unboxed = null;
    final Class boxed = null;
    final TypeAdapter typeAdapter = null;

    // Act
    final TypeAdapterFactory retval = TypeAdapters.newFactory(unboxed, boxed, typeAdapter);

    // Assert result
    Assert.assertNotNull(retval);
    Assert.assertEquals(null, Reflector.getInstanceField(retval, "val$typeAdapter"));
    Assert.assertEquals(null, Reflector.getInstanceField(retval, "val$unboxed"));
    Assert.assertEquals(null, Reflector.getInstanceField(retval, "val$boxed"));
  }
}
